//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/ActionFiles/GridMovement.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @GridMovement : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @GridMovement()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""GridMovement"",
    ""maps"": [
        {
            ""name"": ""CursorMovement"",
            ""id"": ""e4b07b64-def1-446d-8cdf-16af7556e3fd"",
            ""actions"": [
                {
                    ""name"": ""Left"",
                    ""type"": ""Button"",
                    ""id"": ""85d0eb18-7003-4396-9eb2-edd1511bb2b1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Right"",
                    ""type"": ""Button"",
                    ""id"": ""022827b3-7780-4bc8-97aa-2108efaa0941"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Up"",
                    ""type"": ""Button"",
                    ""id"": ""d2983123-f80d-47a3-8290-37e869f20d7d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Down"",
                    ""type"": ""Button"",
                    ""id"": ""a9fcf47c-d351-4e55-9345-e90e36b8e841"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""6f521d56-713c-4635-bc93-32117d600224"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f3873a0c-dc5b-4d16-9dd8-77f28bc35d2f"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ab94bc5d-d85f-4c0c-a57c-a271e9230d0a"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Up"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""327195c0-1170-4631-af1b-a1fa788762c2"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Down"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // CursorMovement
        m_CursorMovement = asset.FindActionMap("CursorMovement", throwIfNotFound: true);
        m_CursorMovement_Left = m_CursorMovement.FindAction("Left", throwIfNotFound: true);
        m_CursorMovement_Right = m_CursorMovement.FindAction("Right", throwIfNotFound: true);
        m_CursorMovement_Up = m_CursorMovement.FindAction("Up", throwIfNotFound: true);
        m_CursorMovement_Down = m_CursorMovement.FindAction("Down", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // CursorMovement
    private readonly InputActionMap m_CursorMovement;
    private ICursorMovementActions m_CursorMovementActionsCallbackInterface;
    private readonly InputAction m_CursorMovement_Left;
    private readonly InputAction m_CursorMovement_Right;
    private readonly InputAction m_CursorMovement_Up;
    private readonly InputAction m_CursorMovement_Down;
    public struct CursorMovementActions
    {
        private @GridMovement m_Wrapper;
        public CursorMovementActions(@GridMovement wrapper) { m_Wrapper = wrapper; }
        public InputAction @Left => m_Wrapper.m_CursorMovement_Left;
        public InputAction @Right => m_Wrapper.m_CursorMovement_Right;
        public InputAction @Up => m_Wrapper.m_CursorMovement_Up;
        public InputAction @Down => m_Wrapper.m_CursorMovement_Down;
        public InputActionMap Get() { return m_Wrapper.m_CursorMovement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CursorMovementActions set) { return set.Get(); }
        public void SetCallbacks(ICursorMovementActions instance)
        {
            if (m_Wrapper.m_CursorMovementActionsCallbackInterface != null)
            {
                @Left.started -= m_Wrapper.m_CursorMovementActionsCallbackInterface.OnLeft;
                @Left.performed -= m_Wrapper.m_CursorMovementActionsCallbackInterface.OnLeft;
                @Left.canceled -= m_Wrapper.m_CursorMovementActionsCallbackInterface.OnLeft;
                @Right.started -= m_Wrapper.m_CursorMovementActionsCallbackInterface.OnRight;
                @Right.performed -= m_Wrapper.m_CursorMovementActionsCallbackInterface.OnRight;
                @Right.canceled -= m_Wrapper.m_CursorMovementActionsCallbackInterface.OnRight;
                @Up.started -= m_Wrapper.m_CursorMovementActionsCallbackInterface.OnUp;
                @Up.performed -= m_Wrapper.m_CursorMovementActionsCallbackInterface.OnUp;
                @Up.canceled -= m_Wrapper.m_CursorMovementActionsCallbackInterface.OnUp;
                @Down.started -= m_Wrapper.m_CursorMovementActionsCallbackInterface.OnDown;
                @Down.performed -= m_Wrapper.m_CursorMovementActionsCallbackInterface.OnDown;
                @Down.canceled -= m_Wrapper.m_CursorMovementActionsCallbackInterface.OnDown;
            }
            m_Wrapper.m_CursorMovementActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Left.started += instance.OnLeft;
                @Left.performed += instance.OnLeft;
                @Left.canceled += instance.OnLeft;
                @Right.started += instance.OnRight;
                @Right.performed += instance.OnRight;
                @Right.canceled += instance.OnRight;
                @Up.started += instance.OnUp;
                @Up.performed += instance.OnUp;
                @Up.canceled += instance.OnUp;
                @Down.started += instance.OnDown;
                @Down.performed += instance.OnDown;
                @Down.canceled += instance.OnDown;
            }
        }
    }
    public CursorMovementActions @CursorMovement => new CursorMovementActions(this);
    public interface ICursorMovementActions
    {
        void OnLeft(InputAction.CallbackContext context);
        void OnRight(InputAction.CallbackContext context);
        void OnUp(InputAction.CallbackContext context);
        void OnDown(InputAction.CallbackContext context);
    }
}
